--#
--# Quartz seems to work best with the driver mm.mysql-2.0.7-bin.jar
--#
--# PLEASE consider using mysql with innodb tables to avoid locking issues
--#
--# In your Quartz properties file, you'll need to set 
--# org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
--#
--QRTZ_CALENDARS 以 Blob 类型存储 Quartz 的 Calendar 信息 
--QRTZ_CRON_TRIGGERS 存储 Cron Trigger，包括 Cron表达式和时区信息 
--QRTZ_FIRED_TRIGGERS 存储与已触发的 Trigger 相关的状态信息，以及相联 Job的执行信息 
--QRTZ_PAUSED_TRIGGER_GRPS 存储已暂停的 Trigger 组的信息 
--QRTZ_SCHEDULER_STATE 存储少量的有关 Scheduler 的状态信息，和别的 Scheduler实例(假如是用于一个集群中) 
--QRTZ_LOCKS 存储程序的悲观锁的信息(假如使用了悲观锁) 
--QRTZ_JOB_DETAILS 存储每一个已配置的 Job 的详细信息 
--QRTZ_JOB_LISTENERS 存储有关已配置的 JobListener 的信息 
--QRTZ_SIMPLE_TRIGGERS 存储简单的Trigger，包括重复次数，间隔，以及已触的次数 
--QRTZ_BLOG_TRIGGERS Trigger 作为 Blob 类型存储(用于 Quartz 用户用 JDBC创建他们自己定制的 Trigger 类型，JobStore 并不知道如何存储实例的时候) 
--QRTZ_TRIGGER_LISTENERS 存储已配置的 TriggerListener 的信息 
--QRTZ_TRIGGERS 存储已配置的 Trigger 的信息 

--quartz 持久化数据库表格字段解释
--建表,SQL语句在quartz-1.6.6\docs\dbTables文件夹中可以找到,介绍下主要的几张表： 
--       表qrtz_job_details: 保存job详细信息,该表需要用户根据实际情况初始化 
--       job_name:集群中job的名字,该名字用户自己可以随意定制,无强行要求 
--       job_group:集群中job的所属组的名字,该名字用户自己随意定制,无强行要求 
--       job_class_name:集群中个note job实现类的完全包名,quartz就是根据这个路径到classpath找到该job类 
--       is_durable:是否持久化,把该属性设置为1，quartz会把job持久化到数据库中 
--       job_data:一个blob字段，存放持久化job对象 
--
--       表qrtz_triggers: 保存trigger信息 
--       trigger_name: trigger的名字,该名字用户自己可以随意定制,无强行要求 
--       trigger_group:trigger所属组的名字,该名字用户自己随意定制,无强行要求 
--       job_name: qrtz_job_details表job_name的外键 
--       job_group: qrtz_job_details表job_group的外键 
--       trigger_state:当前trigger状态，设置为ACQUIRED,如果设置为WAITING,则job不会触发 
--       trigger_cron:触发器类型,使用cron表达式 
--
--       表qrtz_cron_triggers:存储cron表达式表 
--       trigger_name: qrtz_triggers表trigger_name的外键 
--       trigger_group: qrtz_triggers表trigger_group的外键 
--       cron_expression:cron表达式 
--       
--       表qrtz_scheduler_state:存储集群中note实例信息，quartz会定时读取该表的信息判断集群中每个实例的当前状态 
--       instance_name:之前配置文件中org.quartz.scheduler.instanceId配置的名字，就会写入该字段，如果设置为AUTO,quartz会根据物理机名和当前时间产生一个名字 
--       last_checkin_time:上次检查时间 
--       checkin_interval:检查间隔时间 

--DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
--DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
--DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
--DROP TABLE IF EXISTS QRTZ_LOCKS;
--DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
--DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
--DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
--DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
--DROP TABLE IF EXISTS QRTZ_TRIGGERS;
--DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
--DROP TABLE IF EXISTS QRTZ_CALENDARS;
--Mysql
--
--CREATE TABLE  IF NOT EXISTS QRTZ_JOB_DETAILS
--  (
--    SCHED_NAME VARCHAR(120) NOT NULL,
--    JOB_NAME  VARCHAR(200) NOT NULL,
--    JOB_GROUP VARCHAR(200) NOT NULL,
--    DESCRIPTION VARCHAR(250) NULL,
--    JOB_CLASS_NAME   VARCHAR(250) NOT NULL,
--    IS_DURABLE VARCHAR(1) NOT NULL,
--    IS_NONCONCURRENT VARCHAR(1) NOT NULL,
--    IS_UPDATE_DATA VARCHAR(1) NOT NULL,
--    REQUESTS_RECOVERY VARCHAR(1) NOT NULL,
--    JOB_DATA BLOB NULL,
--    PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
--)ENGINE=InnoDB DEFAULT CHARSET=utf8;
--
--CREATE TABLE  IF NOT EXISTS QRTZ_TRIGGERS
--  (
--    SCHED_NAME VARCHAR(120) NOT NULL,
--    TRIGGER_NAME VARCHAR(200) NOT NULL,
--    TRIGGER_GROUP VARCHAR(200) NOT NULL,
--    JOB_NAME  VARCHAR(200) NOT NULL,
--    JOB_GROUP VARCHAR(200) NOT NULL,
--    DESCRIPTION VARCHAR(250) NULL,
--    NEXT_FIRE_TIME BIGINT(13) NULL,
--    PREV_FIRE_TIME BIGINT(13) NULL,
--    PRIORITY INTEGER NULL,
--    TRIGGER_STATE VARCHAR(16) NOT NULL,
--    TRIGGER_TYPE VARCHAR(8) NOT NULL,
--    START_TIME BIGINT(13) NOT NULL,
--    END_TIME BIGINT(13) NULL,
--    CALENDAR_NAME VARCHAR(200) NULL,
--    MISFIRE_INSTR SMALLINT(2) NULL,
--    JOB_DATA BLOB NULL,
--    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
--    FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
--        REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)
--)ENGINE=InnoDB DEFAULT CHARSET=utf8;
--
--CREATE TABLE  IF NOT EXISTS QRTZ_SIMPLE_TRIGGERS
--  (
--    SCHED_NAME VARCHAR(120) NOT NULL,
--    TRIGGER_NAME VARCHAR(200) NOT NULL,
--    TRIGGER_GROUP VARCHAR(200) NOT NULL,
--    REPEAT_COUNT BIGINT(7) NOT NULL,
--    REPEAT_INTERVAL BIGINT(12) NOT NULL,
--    TIMES_TRIGGERED BIGINT(10) NOT NULL,
--    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
--    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
--        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
--)ENGINE=InnoDB DEFAULT CHARSET=utf8;
--
--CREATE TABLE  IF NOT EXISTS QRTZ_CRON_TRIGGERS
--  (
--    SCHED_NAME VARCHAR(120) NOT NULL,
--    TRIGGER_NAME VARCHAR(200) NOT NULL,
--    TRIGGER_GROUP VARCHAR(200) NOT NULL,
--    CRON_EXPRESSION VARCHAR(200) NOT NULL,
--    TIME_ZONE_ID VARCHAR(80),
--    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
--    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
--        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
--)ENGINE=InnoDB DEFAULT CHARSET=utf8;
--
--CREATE TABLE  IF NOT EXISTS QRTZ_SIMPROP_TRIGGERS
--  (          
--    SCHED_NAME VARCHAR(120) NOT NULL,
--    TRIGGER_NAME VARCHAR(200) NOT NULL,
--    TRIGGER_GROUP VARCHAR(200) NOT NULL,
--    STR_PROP_1 VARCHAR(512) NULL,
--    STR_PROP_2 VARCHAR(512) NULL,
--    STR_PROP_3 VARCHAR(512) NULL,
--    INT_PROP_1 INT NULL,
--    INT_PROP_2 INT NULL,
--    LONG_PROP_1 BIGINT NULL,
--    LONG_PROP_2 BIGINT NULL,
--    DEC_PROP_1 NUMERIC(13,4) NULL,
--    DEC_PROP_2 NUMERIC(13,4) NULL,
--    BOOL_PROP_1 VARCHAR(1) NULL,
--    BOOL_PROP_2 VARCHAR(1) NULL,
--    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
--    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) 
--    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
--)ENGINE=InnoDB DEFAULT CHARSET=utf8;
--
--CREATE TABLE  IF NOT EXISTS QRTZ_BLOB_TRIGGERS
--  (
--    SCHED_NAME VARCHAR(120) NOT NULL,
--    TRIGGER_NAME VARCHAR(200) NOT NULL,
--    TRIGGER_GROUP VARCHAR(200) NOT NULL,
--    BLOB_DATA BLOB NULL,
--    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
--    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
--        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
--)ENGINE=InnoDB DEFAULT CHARSET=utf8;
--
--CREATE TABLE  IF NOT EXISTS QRTZ_CALENDARS
--  (
--    SCHED_NAME VARCHAR(120) NOT NULL,
--    CALENDAR_NAME  VARCHAR(200) NOT NULL,
--    CALENDAR BLOB NOT NULL,
--    PRIMARY KEY (SCHED_NAME,CALENDAR_NAME)
--)ENGINE=InnoDB DEFAULT CHARSET=utf8;
--
--CREATE TABLE  IF NOT EXISTS QRTZ_PAUSED_TRIGGER_GRPS
--  (
--    SCHED_NAME VARCHAR(120) NOT NULL,
--    TRIGGER_GROUP  VARCHAR(200) NOT NULL, 
--    PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
--)ENGINE=InnoDB DEFAULT CHARSET=utf8;
--
--CREATE TABLE  IF NOT EXISTS QRTZ_FIRED_TRIGGERS
--  (
--    SCHED_NAME VARCHAR(120) NOT NULL,
--    ENTRY_ID VARCHAR(95) NOT NULL,
--    TRIGGER_NAME VARCHAR(200) NOT NULL,
--    TRIGGER_GROUP VARCHAR(200) NOT NULL,
--    INSTANCE_NAME VARCHAR(200) NOT NULL,
--    FIRED_TIME BIGINT(13) NOT NULL,
--    PRIORITY INTEGER NOT NULL,
--    STATE VARCHAR(16) NOT NULL,
--    JOB_NAME VARCHAR(200) NULL,
--    JOB_GROUP VARCHAR(200) NULL,
--    IS_NONCONCURRENT VARCHAR(1) NULL,
--    REQUESTS_RECOVERY VARCHAR(1) NULL,
--    PRIMARY KEY (SCHED_NAME,ENTRY_ID)
--)ENGINE=InnoDB DEFAULT CHARSET=utf8;
--
--CREATE TABLE  IF NOT EXISTS QRTZ_SCHEDULER_STATE
--  (
--    SCHED_NAME VARCHAR(120) NOT NULL,
--    INSTANCE_NAME VARCHAR(200) NOT NULL,
--    LAST_CHECKIN_TIME BIGINT(13) NOT NULL,
--    CHECKIN_INTERVAL BIGINT(13) NOT NULL,
--    PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
--)ENGINE=InnoDB DEFAULT CHARSET=utf8;
--
--CREATE TABLE  IF NOT EXISTS QRTZ_LOCKS
--  (
--    SCHED_NAME VARCHAR(120) NOT NULL,
--    LOCK_NAME  VARCHAR(40) NOT NULL, 
--    PRIMARY KEY (SCHED_NAME,LOCK_NAME)
--)ENGINE=InnoDB DEFAULT CHARSET=utf8;
--
--
--commit;
--Srdb
CREATE TABLE  IF NOT EXISTS QRTZ_JOB_DETAILS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    JOB_NAME  VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250) NULL,
    JOB_CLASS_NAME   VARCHAR(250) NOT NULL,
    IS_DURABLE VARCHAR(1) NOT NULL,
    IS_NONCONCURRENT VARCHAR(1) NOT NULL,
    IS_UPDATE_DATA VARCHAR(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
);

CREATE TABLE  IF NOT EXISTS QRTZ_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    JOB_NAME  VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250) NULL,
    NEXT_FIRE_TIME BIGINT NULL,
    PREV_FIRE_TIME BIGINT NULL,
    PRIORITY INTEGER NULL,
    TRIGGER_STATE VARCHAR(16) NOT NULL,
    TRIGGER_TYPE VARCHAR(8) NOT NULL,
    START_TIME BIGINT NOT NULL,
    END_TIME BIGINT NULL,
    CALENDAR_NAME VARCHAR(200) NULL,
    MISFIRE_INSTR SMALLINT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
        REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)
);

CREATE TABLE  IF NOT EXISTS QRTZ_SIMPLE_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    REPEAT_COUNT BIGINT NOT NULL,
    REPEAT_INTERVAL BIGINT NOT NULL,
    TIMES_TRIGGERED BIGINT NOT NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE  IF NOT EXISTS QRTZ_CRON_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    CRON_EXPRESSION VARCHAR(200) NOT NULL,
    TIME_ZONE_ID VARCHAR(80),
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE  IF NOT EXISTS QRTZ_SIMPROP_TRIGGERS
  (          
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    STR_PROP_1 VARCHAR(512) NULL,
    STR_PROP_2 VARCHAR(512) NULL,
    STR_PROP_3 VARCHAR(512) NULL,
    INT_PROP_1 INT NULL,
    INT_PROP_2 INT NULL,
    LONG_PROP_1 BIGINT NULL,
    LONG_PROP_2 BIGINT NULL,
    DEC_PROP_1 NUMERIC(13,4) NULL,
    DEC_PROP_2 NUMERIC(13,4) NULL,
    BOOL_PROP_1 VARCHAR(1) NULL,
    BOOL_PROP_2 VARCHAR(1) NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) 
    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE  IF NOT EXISTS QRTZ_BLOB_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE  IF NOT EXISTS QRTZ_CALENDARS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    CALENDAR_NAME  VARCHAR(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (SCHED_NAME,CALENDAR_NAME)
);

CREATE TABLE  IF NOT EXISTS QRTZ_PAUSED_TRIGGER_GRPS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_GROUP  VARCHAR(200) NOT NULL, 
    PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
);

CREATE TABLE  IF NOT EXISTS QRTZ_FIRED_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    ENTRY_ID VARCHAR(95) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    FIRED_TIME BIGINT NOT NULL,
    PRIORITY INTEGER NOT NULL,
    STATE VARCHAR(16) NOT NULL,
    JOB_NAME VARCHAR(200) NULL,
    JOB_GROUP VARCHAR(200) NULL,
    IS_NONCONCURRENT VARCHAR(1) NULL,
    REQUESTS_RECOVERY VARCHAR(1) NULL,
    PRIMARY KEY (SCHED_NAME,ENTRY_ID)
);

CREATE TABLE  IF NOT EXISTS QRTZ_SCHEDULER_STATE
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT NOT NULL,
    CHECKIN_INTERVAL BIGINT NOT NULL,
    PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
);

CREATE TABLE  IF NOT EXISTS QRTZ_LOCKS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    LOCK_NAME  VARCHAR(40) NOT NULL, 
    PRIMARY KEY (SCHED_NAME,LOCK_NAME)
);